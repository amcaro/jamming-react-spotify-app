{"version":3,"sources":["Components/SearchBar/SearchBar.js","Components/Track/Track.js","Components/TrackList/TrackList.js","Components/SearchResults/SearchResults.js","Components/Playlist/Playlist.js","util/Spotify.js","Components/App/App.js","reportWebVitals.js","index.js"],"names":["SearchBar","props","useState","term","setTerm","className","placeholder","onChange","e","target","value","onClick","onSearch","search","Track","addTrack","onAdd","track","removeTrack","onRemove","trackArtists","artists","map","artist","name","lastIndx","length","replace","album","buttonSign","isRemoval","renderAction","TrackList","tracks","tracksItems","id","SearchResults","searchResults","PlayList","expiresIn","accessToken","type","setName","onSave","spotify","getAccessToken","URL","window","location","href","expMatch","match","tokMatch","setTimeout","history","pushState","urlTerm","encodeURI","searchUrl","fetch","headers","response","json","items","forEach","tObj","uri","push","savePlaylist","listName","trackURIs","header","ok","data","userID","console","log","playlistURL","method","body","JSON","stringify","playlistID","addtracksURL","uris","Notification","App","setResults","playlistName","setPlaylistName","playlistTracks","setPlaylistTracks","useEffect","requestPermission","then","results","catch","err","inPlaylist","filter","pTrack","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.b24785e3.chunk.js","sourcesContent":["import './SearchBar.css';\r\nimport { useState } from 'react';\r\n\r\nfunction SearchBar(props) {\r\n\r\n    const [term, setTerm] = useState('');\r\n\r\n    const search = (term) => {\r\n        props.onSearch(term);\r\n    }\r\n\r\n    const handleTermChange = (e) => {\r\n        setTerm(e.target.value);\r\n    }\r\n\r\n    const handleClick = () => {\r\n        search(term);\r\n    }\r\n\r\n    return (\r\n        <div className=\"SearchBar\">\r\n            <input placeholder=\"Search a track\" onChange={handleTermChange} value={term}/>\r\n            <button className=\"SearchButton\" onClick={handleClick}>SEARCH</button>\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default SearchBar;","import './Track.css';\r\n\r\nfunction Track(props) {\r\n\r\n    const renderAction = () => {\r\n      let buttonSign = <button className=\"Track-action\" onClick={addTrack}>+</button>;\r\n      if(props.isRemoval) {\r\n        buttonSign = <button className=\"Track-action\" onClick={removeTrack}>-</button>;\r\n      }\r\n\r\n      return buttonSign;\r\n    }\r\n\r\n    const addTrack = () => {\r\n      props.onAdd(props.track);\r\n    }\r\n    \r\n    const removeTrack = () => {\r\n      props.onRemove(props.track);\r\n    }\r\n\r\n    const trackArtists = props.track.artists.map(artist => `${artist.name}, `);\r\n    const lastIndx = trackArtists.length - 1;\r\n\r\n    trackArtists[lastIndx] = trackArtists[lastIndx].replace(', ' , '');\r\n\r\n    return (\r\n        <div className=\"Track\">\r\n          <div className=\"Track-information\">\r\n            <h3>{props.track.name}</h3>\r\n            <p>{trackArtists} | {props.track.album.name} </p>\r\n          </div>\r\n          {renderAction()}\r\n      </div>\r\n    );\r\n}\r\n\r\nexport default Track;","import './TrackList.css';\r\nimport Track from '../Track/Track';\r\n\r\nconst TrackList = (props) => {\r\n\r\n     if(!props.tracks){\r\n         return (<p>No results</p>);\r\n     }\r\n\r\n    const tracksItems = props.tracks.map(track => \r\n        <li key={track.id}>\r\n            <Track track={track} \r\n                isRemoval={props.isRemoval} \r\n                onAdd={props.onAdd} \r\n                onRemove={props.onRemove}\r\n            />\r\n        </li>\r\n    );\r\n    return (\r\n        <div className=\"TrackList\">\r\n            <ul>{tracksItems}</ul>\r\n        </div>\r\n    );\r\n\r\n}\r\n\r\nexport default TrackList;\r\n\r\n","import './SearchResults.css';\r\nimport TrackList from '../TrackList/TrackList';\r\n\r\nfunction SearchResults(props) {\r\n\r\n    return (\r\n        <div className=\"SearchResults\">\r\n            <h2>Results</h2>\r\n            <TrackList tracks={props.searchResults} onAdd={props.onAdd} isRemoval={false} />\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default SearchResults;","import './Playlist.css'\r\nimport TrackList from '../TrackList/TrackList';\r\n\r\nfunction PlayList(props) {\r\n\r\n    const changeHandler = (e) => {\r\n        props.setName(e.target.value);\r\n    }\r\n\r\n    const clickHandler = () => {\r\n        props.onSave();\r\n        props.setName('New Playlist')\r\n    }\r\n\r\n    return (\r\n        <div className=\"Playlist\">\r\n            <input type=\"text\" name=\"playlist\" value={props.name} onChange={changeHandler}/>\r\n            <TrackList tracks={props.tracks} onRemove={props.onRemove} isRemoval={true}/>\r\n            <button className=\"Playlist-save\" onClick={clickHandler}>SAVE TO SPOTIFY</button>\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default PlayList;","const baseURL = 'https://accounts.spotify.com/authorize?';\r\nconst clientId = '221c24a4cc8f4d59b13a38940b77ce4e';\r\nconst redirectURI = 'https://amcaro.github.io/jamming-react-spotify-app/';\r\n\r\nlet expiresIn;\r\nexport let accessToken;\r\n\r\nconst spotify = {\r\n    getAccessToken() {\r\n        \r\n        if(accessToken) { \r\n            return accessToken;\r\n        }\r\n        \r\n        const URL = window.location.href;\r\n        const expMatch = URL.match(/expires_in=([^&]*)/);\r\n        const tokMatch = URL.match(/access_token=([^&]*)/);\r\n        \r\n        if(tokMatch && expMatch) {\r\n            accessToken = tokMatch[0].replace(\"access_token=\", \"\");\r\n            expiresIn = expMatch[0].replace(\"expires_in=\", \"\");\r\n\r\n            window.setTimeout(() => accessToken = null, expiresIn * 1000);\r\n            window.history.pushState('Access Token', null, '/');\r\n\r\n            return accessToken;\r\n        }\r\n\r\n        window.location.href = `${baseURL}&client_id=${clientId}&scope=playlist-modify-public&redirect_uri=${redirectURI}&response_type=token`;\r\n    },\r\n\r\n    async search(term) {\r\n        const urlTerm = encodeURI(term);\r\n        const searchUrl = `https://api.spotify.com/v1/search?q=${urlTerm}&type=track`;\r\n        const tracks = [];\r\n\r\n        const response = await fetch(searchUrl, {\r\n            headers: {\r\n                'Authorization': 'Bearer ' + accessToken\r\n            }\r\n        })\r\n        const data = await response.json();\r\n\r\n        data.tracks.items.forEach(track => { \r\n            const tObj = {\r\n                id: track.id,\r\n                name: track.name,\r\n                artists: [],\r\n                album: {\r\n                    name: track.album.name\r\n                },\r\n                uri: track.uri\r\n            };\r\n\r\n            track.artists.forEach(artist => {\r\n                tObj.artists.push({name: artist.name});\r\n            });\r\n\r\n            tracks.push(tObj);   \r\n        })\r\n\r\n        return tracks;\r\n    },\r\n\r\n    async savePlaylist(listName, trackURIs) {\r\n\r\n        if ( !listName || !trackURIs.length ) {\r\n            return;\r\n        }\r\n        \r\n        //Get user ID\r\n        const userURL = 'https://api.spotify.com/v1/me'\r\n        const header = { 'Authorization': 'Bearer ' + accessToken };\r\n        let userID;\r\n\r\n        let response = await fetch(userURL, {headers: header});\r\n\r\n        if(response.ok) {\r\n            const data = await response.json();\r\n            userID = data.id;\r\n        }\r\n        else {\r\n            console.log('Error fetching userID');\r\n            return;\r\n        }\r\n\r\n        // Create new Playlist in user account\r\n        const playlistURL = `https://api.spotify.com/v1/users/${userID}/playlists`;\r\n        let playlistID;\r\n\r\n        response = await fetch(playlistURL, {\r\n            method: 'POST',\r\n            headers: header,\r\n            body: JSON.stringify({name: listName}),\r\n            json: true\r\n        });\r\n\r\n        if(response.ok) {\r\n           const data = await response.json();\r\n           playlistID = data.id;\r\n        }\r\n        else {\r\n            console.log('Error posting Playlist');\r\n            return;\r\n        }\r\n\r\n        //Add song tracks to created playlist\r\n        const addtracksURL = `https://api.spotify.com/v1/playlists/${playlistID}/tracks`;\r\n\r\n\r\n        response = await fetch(addtracksURL, {\r\n            method: 'POST',\r\n            headers: { \r\n                'Authorization': 'Bearer ' + accessToken,\r\n                'Content-Type': 'application/json',\r\n            },\r\n            body: JSON.stringify({uris: trackURIs })\r\n        });\r\n\r\n        if(response.ok) {\r\n            const data = response.json();\r\n            new Notification(`'${listName}' has been saved to Spotify!`)\r\n            console.log('Songs added to playlist')\r\n        }\r\n        else {\r\n            console.log('Error adding songs to playlist');\r\n        }\r\n    }\r\n}\r\n\r\nexport default spotify;","import './App.css';\nimport SearchBar from '../SearchBar/SearchBar';\nimport SearchResults from '../SearchResults/SearchResults';\nimport PlayList from '../Playlist/Playlist';\nimport {useState, useEffect} from 'react';\nimport spotify from '../../util/Spotify';\n\n\nfunction App(props) {\n  \n  const [searchResults, setResults] = useState([]);\n  const [playlistName, setPlaylistName] = useState('New Playlist');\n  const [playlistTracks, setPlaylistTracks] = useState([]);\n\n  useEffect(() => {\n    spotify.getAccessToken();\n    Notification.requestPermission();\n  }, []);\n\n  const addTrack = (track) => {\n    let inPlaylist = false;\n    \n    for (const pTrack of playlistTracks) {\n      if(pTrack.id === track.id) {\n        inPlaylist = true;\n        break;\n      }\n    }\n    \n    if(!inPlaylist) {\n      setPlaylistTracks([...playlistTracks, track]);\n    }\n    \n  }\n\n  const removeTrack = (track) => {\n    setPlaylistTracks(playlistTracks.filter(pTrack => pTrack.id !== track.id));\n  }\n\n  const savePlaylist = () => {\n    const trackURIs = playlistTracks.map(track => track.uri);\n    spotify.savePlaylist(playlistName, trackURIs);\n    setPlaylistTracks([]);\n  }\n\n  const search = (term) => {\n    spotify.search(term).then(results => {\n      setResults(results);\n    })\n    .catch(err => {\n      console.log(err);\n    });\n    \n  }\n\n  return (\n    <div>\n      <h1>Ja<span className=\"highlight\">mmm</span>ing</h1>\n      <div className=\"App\">\n        <SearchBar onSearch={search}/>\n        <div className=\"App-playlist\">\n          <SearchResults searchResults={searchResults} onAdd={addTrack} />\n          <PlayList name={playlistName} \n                    tracks={playlistTracks} \n                    onRemove={removeTrack} \n                    setName={setPlaylistName}\n                    onSave={savePlaylist}\n          />\n        </div>\n      </div>\n    </div>\n  );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './Components/App/App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}